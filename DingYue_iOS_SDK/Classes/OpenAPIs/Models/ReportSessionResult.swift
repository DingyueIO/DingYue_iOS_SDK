//
// ReportSessionResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ReportSessionResult: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case ok = "ok"
        case fail = "fail"
    }
    /** the status of the operation */
    public var status: Status
    /** indicates why this operation fails */
    public var errmsg: String?
    public var paywall: Paywall?
    public var paywallId: String?
    public var switchItems: [SwitchItem]?
    public var subscribedProducts: [SubscribedObject]?
    public var globalSwitchItems: [GlobalSwitch]?

    public init(status: Status, errmsg: String? = nil, paywall: Paywall? = nil, paywallId: String? = nil, switchItems: [SwitchItem]? = nil, subscribedProducts: [SubscribedObject]? = nil, globalSwitchItems: [GlobalSwitch]? = nil) {
        self.status = status
        self.errmsg = errmsg
        self.paywall = paywall
        self.paywallId = paywallId
        self.switchItems = switchItems
        self.subscribedProducts = subscribedProducts
        self.globalSwitchItems = globalSwitchItems
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status
        case errmsg
        case paywall
        case paywallId
        case switchItems
        case subscribedProducts
        case globalSwitchItems
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(errmsg, forKey: .errmsg)
        try container.encodeIfPresent(paywall, forKey: .paywall)
        try container.encodeIfPresent(paywallId, forKey: .paywallId)
        try container.encodeIfPresent(switchItems, forKey: .switchItems)
        try container.encodeIfPresent(subscribedProducts, forKey: .subscribedProducts)
        try container.encodeIfPresent(globalSwitchItems, forKey: .globalSwitchItems)
    }
}

