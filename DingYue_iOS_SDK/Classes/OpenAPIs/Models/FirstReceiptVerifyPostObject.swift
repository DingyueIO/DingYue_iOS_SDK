//
// FirstReceiptVerifyPostObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FirstReceiptVerifyPostObject: Codable, JSONEncodable, Hashable {

    /** base64 encoded string that represents receipt to be verified. Apple only */
    public var appleReceipt: String?
    /** the token provided to the user's device when the subscription was purchased. Android only */
    public var androidToken: String?
    /** which subscription generates this receipt */
    public var platformProductId: String
    public var price: String
    public var currencyCode: String
    public var countryCode: String

    public init(appleReceipt: String? = nil, androidToken: String? = nil, platformProductId: String, price: String, currencyCode: String, countryCode: String) {
        self.appleReceipt = appleReceipt
        self.androidToken = androidToken
        self.platformProductId = platformProductId
        self.price = price
        self.currencyCode = currencyCode
        self.countryCode = countryCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appleReceipt
        case androidToken
        case platformProductId
        case price
        case currencyCode
        case countryCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appleReceipt, forKey: .appleReceipt)
        try container.encodeIfPresent(androidToken, forKey: .androidToken)
        try container.encode(platformProductId, forKey: .platformProductId)
        try container.encode(price, forKey: .price)
        try container.encode(currencyCode, forKey: .currencyCode)
        try container.encode(countryCode, forKey: .countryCode)
    }
}

