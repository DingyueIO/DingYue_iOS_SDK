//
// UniqueUserObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** user object */
public struct UniqueUserObject: Codable, JSONEncodable, Hashable {

    public enum Connection: String, Codable, CaseIterable {
        case wifi = "WIFI"
        case mobile = "MOBILE"
        case fixed = "FIXED"
        case bluetooth = "BLUETOOTH"
        case unknown = "UNKNOWN"
        case _none = "NONE"
    }
    /** OS version */
    public var osVersion: String
    /** APP version */
    public var appVersion: String?
    /** iOS only */
    public var idfa: String?
    /** iOS only */
    public var idfv: String?
    /** Push device token. iOS only */
    public var deviceToken: String?
    /** device model */
    public var device: String
    /** device network connection method */
    public var connection: Connection?
    public var attribution: UniqueUserObjectAttribution?
    public var area: String?
    public var language: String?
    public var extraData: [String:String]?

    public init(osVersion: String, appVersion: String? = nil, idfa: String? = nil, idfv: String? = nil, deviceToken: String? = nil, device: String, connection: Connection? = nil,attribution: UniqueUserObjectAttribution? = nil,area: String? = nil,language: String? = nil,extraData: [String:String]? = nil) {
        self.osVersion = osVersion
        self.appVersion = appVersion
        self.idfa = idfa
        self.idfv = idfv
        self.deviceToken = deviceToken
        self.device = device
        self.connection = connection
        self.attribution = attribution
        self.area = area
        self.language = language
        self.extraData = extraData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case osVersion
        case appVersion
        case idfa
        case idfv
        case deviceToken
        case device
        case connection
        case attribution
        case area
        case language
        case extraData
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(osVersion, forKey: .osVersion)
        try container.encodeIfPresent(appVersion, forKey: .appVersion)
        try container.encodeIfPresent(idfa, forKey: .idfa)
        try container.encodeIfPresent(idfv, forKey: .idfv)
        try container.encodeIfPresent(deviceToken, forKey: .deviceToken)
        try container.encode(device, forKey: .device)
        try container.encodeIfPresent(connection, forKey: .connection)
        try container.encodeIfPresent(attribution, forKey: .attribution)
        try container.encodeIfPresent(area, forKey: .area)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(extraData, forKey: .extraData)
    }
}

