//
// ReceiptAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ReceiptAPI {

    /**
     * enum for parameter X_PLATFORM
     */
    public enum XPLATFORM_verifyFirstReceipt: String, CaseIterable {
        case ios = "ios"
        case android = "android"
    }

    /**
     verify receipt
     
     - parameter X_USER_ID: (header) an unique string represents the current user 
     - parameter userAgent: (header) user agent 
     - parameter X_APP_ID: (header) an unique string represents the current user 
     - parameter X_PLATFORM: (header) an unique string represents the current user 
     - parameter firstReceiptVerifyPostObject: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyFirstReceipt(X_USER_ID: String, userAgent: String, X_APP_ID: String, X_PLATFORM: XPLATFORM_verifyFirstReceipt, firstReceiptVerifyPostObject: FirstReceiptVerifyPostObject, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String:Any]?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyFirstReceiptWithRequestBuilder(X_USER_ID: X_USER_ID, userAgent: userAgent, X_APP_ID: X_APP_ID, X_PLATFORM: X_PLATFORM, firstReceiptVerifyPostObject: firstReceiptVerifyPostObject).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(DYMDefaultsManager.shared.firstReceiptResponse(firstReceiptResponse: response.body), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     verify receipt
     - POST /receipt/verify/first
     - verify receipt. may use the cached previously verified result for performance improvements. supports both sandbox and production environment
     - API Key:
       - type: apiKey X-API-KEY 
       - name: ApiKeyAuth
     - parameter X_USER_ID: (header) an unique string represents the current user 
     - parameter userAgent: (header) user agent 
     - parameter X_APP_ID: (header) an unique string represents the current user 
     - parameter X_PLATFORM: (header) an unique string represents the current user 
     - parameter firstReceiptVerifyPostObject: (body)  
     - returns: RequestBuilder<FirstReceiptVerifyMobileResponse> 
     */
    open class func verifyFirstReceiptWithRequestBuilder(X_USER_ID: String, userAgent: String, X_APP_ID: String, X_PLATFORM: XPLATFORM_verifyFirstReceipt, firstReceiptVerifyPostObject: FirstReceiptVerifyPostObject) -> RequestBuilder<FirstReceiptVerifyMobileResponse> {
        let localVariablePath = "/receipt/verify/first"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: firstReceiptVerifyPostObject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        let X_API_KEY = DYMConstants.APIKeys.secretKey//new add
        let localVariableNillableHeaders: [String: Any?] = [
            "X-USER-ID": X_USER_ID.encodeToJSON(),
            "User-Agent": userAgent.encodeToJSON(),
            "X-APP-ID": X_APP_ID.encodeToJSON(),
            "X-PLATFORM": X_PLATFORM.encodeToJSON(),
            "X-API-KEY": X_API_KEY.encodeToJSON()
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FirstReceiptVerifyMobileResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter X_PLATFORM
     */
    public enum XPLATFORM_verifyReceipt: String, CaseIterable {
        case ios = "ios"
        case android = "android"
    }

    /**
     verify receipt
     
     - parameter X_USER_ID: (header) an unique string represents the current user 
     - parameter userAgent: (header) user agent 
     - parameter X_APP_ID: (header) an unique string represents the current user 
     - parameter X_PLATFORM: (header) an unique string represents the current user 
     - parameter receiptVerifyPostObject: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyReceipt(X_USER_ID: String, userAgent: String, X_APP_ID: String, X_PLATFORM: XPLATFORM_verifyReceipt, receiptVerifyPostObject: ReceiptVerifyPostObject, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [String:Any]?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyReceiptWithRequestBuilder(X_USER_ID: X_USER_ID, userAgent: userAgent, X_APP_ID: X_APP_ID, X_PLATFORM: X_PLATFORM, receiptVerifyPostObject: receiptVerifyPostObject).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                    completion(DYMDefaultsManager.shared.recoverReceiptResponse(recoverReceiptResponse: response.body), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     verify receipt
     - POST /receipt/verify/recover
     - verify receipt. may use the cached previously verified result for performance improvements. supports both sandbox and production environment
     - API Key:
       - type: apiKey X-API-KEY 
       - name: ApiKeyAuth
     - parameter X_USER_ID: (header) an unique string represents the current user 
     - parameter userAgent: (header) user agent 
     - parameter X_APP_ID: (header) an unique string represents the current user 
     - parameter X_PLATFORM: (header) an unique string represents the current user 
     - parameter receiptVerifyPostObject: (body)  
     - returns: RequestBuilder<ReceiptVerifyMobileResponse> 
     */
    open class func verifyReceiptWithRequestBuilder(X_USER_ID: String, userAgent: String, X_APP_ID: String, X_PLATFORM: XPLATFORM_verifyReceipt, receiptVerifyPostObject: ReceiptVerifyPostObject) -> RequestBuilder<ReceiptVerifyMobileResponse> {
        let localVariablePath = "/receipt/verify/recover"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: receiptVerifyPostObject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)
        let X_API_KEY = DYMConstants.APIKeys.secretKey//new add
        let localVariableNillableHeaders: [String: Any?] = [
            "X-USER-ID": X_USER_ID.encodeToJSON(),
            "User-Agent": userAgent.encodeToJSON(),
            "X-APP-ID": X_APP_ID.encodeToJSON(),
            "X-PLATFORM": X_PLATFORM.encodeToJSON(),
            "X-API-KEY": X_API_KEY.encodeToJSON()
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReceiptVerifyMobileResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
